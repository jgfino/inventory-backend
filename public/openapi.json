{
  "openapi": "3.0.0",
  "info": {
    "description": "API Docs for Inventory App",
    "version": "1.0",
    "title": "Inventory API"
  },
  "components": {
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "security": [
    {
      "BearerAuth": []
    }
  ],
  "servers": [
    {
      "url": "/api/v1"
    }
  ],
  "paths": {
    "/locations": {
      "post": {
        "summary": "Create a Location",
        "description": "Create a new Location for the requesting user. Users with free accounts can create up to one Location (either a fridge or a pantry). Users with premium accounts can create unlimited Locations",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/LocationCreateBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/definitions/SuccessResponse"
          },
          "400": {
            "$ref": "#/definitions/BadFormatResponse"
          },
          "401": {
            "$ref": "#/definitions/UnauthorizedResponse"
          }
        }
      },
      "get": {
        "summary": "Get all Locations",
        "description": "Get a list of all the Locations the current user has access to. Users with a free account can view Locations that they own and the one shared Location they are allowed to join. Premium users can view Locations that they own or are a member of. Locations can be searched by name",
        "parameters": [
          {
            "in": "query",
            "name": "q",
            "description": "Search term for searching Location by name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Field to sort Locations by",
            "schema": {
              "type": "string",
              "default": "name",
              "enum": ["name", "createdAt", "updatedAt"]
            }
          },
          {
            "$ref": "#/definitions/OrderQuery"
          },
          {
            "$ref": "#/definitions/LimitQuery"
          },
          {
            "$ref": "#/definitions/OffsetQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Locations",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/LocationBasic"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/definitions/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/definitions/NotFoundResponse"
          }
        }
      }
    },
    "/locations/{id}": {
      "get": {
        "summary": "Get a Location by ID",
        "description": "Get a Location by ID. Will only return a Location if a user is authorized to see it. Users with a free account can view Locations that they own and the one shared Location they are allowed to join. Premium users can view Locations that they own or are a member of.",
        "parameters": [
          {
            "$ref": "#/definitions/LocationIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested Location object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/LocationBasic"
                }
              }
            }
          },
          "401": {
            "$ref": "#/definitions/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/definitions/NotFoundResponse"
          }
        }
      },
      "put": {
        "summary": "Update a Location",
        "description": "Update the Location with the given ID. Updatable fields include name, iconName, and notificationDays. Users with free accounts can update their default personal Location and their default shared Location, as long as the owner of the shared Location has an active subscription. Premium users can update Locations that they own or that they are a member of, provided that the owner of the Location has an active subscription",
        "parameters": [
          {
            "$ref": "#/definitions/LocationIdParam"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/LocationUpdateBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/definitions/SuccessResponse"
          },
          "400": {
            "$ref": "#/definitions/BadFormatResponse"
          },
          "401": {
            "$ref": "#/definitions/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/definitions/NotFoundResponse"
          }
        }
      },
      "delete": {
        "summary": "Delete a Location",
        "description": "Delete a Location by ID. Users can delete Locations that they own, regardless of subscription status.",
        "parameters": [
          {
            "$ref": "#/definitions/LocationIdParam"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/definitions/SuccessResponse"
          },
          "401": {
            "$ref": "#/definitions/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/definitions/NotFoundResponse"
          }
        }
      }
    },
    "/locations/{id}/join": {
      "post": {
        "summary": "Join a Location",
        "description": "Add the requesting user as a member of the Location with the given ID. Free users can join up to one Location owned by a premium user, and premium users can join unlimited Locations owned by premium users",
        "parameters": [
          {
            "$ref": "#/definitions/LocationIdParam"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/definitions/SuccessResponse"
          },
          "401": {
            "$ref": "#/definitions/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/definitions/NotFoundResponse"
          }
        }
      }
    },
    "/locations/{id}/leave": {
      "post": {
        "summary": "Leave a Location",
        "description": "Remove the requesting member as a member of the Location with the given ID. Free users can remove themselves from their default shared Location, and premium users can remove themselves from any Location they are a member of. This is the same as doing a DELETE request to /locations/{id}/members/{memberId} where memberId is the requesting user id.",
        "parameters": [
          {
            "$ref": "#/definitions/LocationIdParam"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/definitions/SuccessResponse"
          },
          "401": {
            "$ref": "#/definitions/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/definitions/NotFoundResponse"
          }
        }
      }
    },
    "/locations/{id}/members/{memberId}": {
      "delete": {
        "summary": "Remove a member from a Location",
        "description": "Remove the member with the given ID from the Location with the given ID. Free users can remove members from their default shared Location, given that the owner has an active subscription. Premium users can remove members from Locations which they own or are a member of, provided that the owner has an active subscription.",
        "parameters": [
          {
            "$ref": "#/definitions/LocationIdParam"
          },
          {
            "in": "path",
            "name": "memberId",
            "description": "The ID of the member to remove",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/definitions/SuccessResponse"
          },
          "401": {
            "$ref": "#/definitions/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/definitions/NotFoundResponse"
          }
        }
      }
    },
    "/locations/{id}/items": {
      "post": {
        "summary": "Add an Item to a Location",
        "description": "Add an Item to the Location with the given ID. Free users can add Items to their default owned Location or their default shared Location, provided that the owner has an active subscription. Premium users can add Items to Locations which they own or are a member or, provided that the owner has an active subscription.",
        "parameters": [
          {
            "$ref": "#/definitions/LocationIdParam"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/ItemCreateBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/definitions/SuccessResponse"
          },
          "400": {
            "$ref": "#/definitions/BadFormatResponse"
          },
          "401": {
            "$ref": "#/definitions/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/definitions/NotFoundResponse"
          }
        }
      },
      "get": {
        "summary": "Get Items in a Location",
        "description": "Get a list of all of the Items in the given Location. Users with a free account can view Items in Locations that they own and the one shared Location they are allowed to join. Premium users can view Items in Locations that they own or are a member of Items can be searched by name",
        "parameters": [
          {
            "in": "query",
            "name": "q",
            "description": "Search term for searching Items by name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Field to sort Items by",
            "schema": {
              "type": "string",
              "default": "name",
              "enum": [
                "name",
                "category",
                "added",
                "expirationDate",
                "opened",
                "purchaseLocation",
                "price"
              ]
            }
          },
          {
            "$ref": "#/definitions/OrderQuery"
          },
          {
            "$ref": "#/definitions/LimitQuery"
          },
          {
            "$ref": "#/definitions/OffsetQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "The Location with a list of Items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Item"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/definitions/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/definitions/NotFoundResponse"
          }
        }
      }
    },
    "/locations/{id}/items/{itemId}": {
      "get": {
        "summary": "Get an Item",
        "description": "Get the Item with the given ID from the Location with the given ID. Users with a free account can view Items in Locations that they own and the one shared Location they are allowed to join. Premium users can view Items in Locations that they own or are a member of. Items can be searched by name",
        "parameters": [
          {
            "$ref": "#/definitions/LocationIdParam"
          },
          {
            "$ref": "#/definitions/ItemIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested Item object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/ItemWithLocation"
                }
              }
            }
          },
          "401": {
            "$ref": "#/definitions/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/definitions/NotFoundResponse"
          }
        }
      },
      "put": {
        "summary": "Update an Item",
        "description": "Update the Item with the given ID in the Location with the given ID. Updatable fields include name, category, iconName, added, expirationDate, opened, purchaseLocation, notes, price. Users with free accounts can update Items in their default personal Location and their default shared Location, as long as the owner of the shared Location has an active subscription. Premium users can update Items in Locations that they own or that they are a member of, provided that the owner of the Location has an active subscription",
        "parameters": [
          {
            "$ref": "#/definitions/LocationIdParam"
          },
          {
            "$ref": "#/definitions/ItemIdParam"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/ItemUpdateBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/definitions/SuccessResponse"
          },
          "400": {
            "$ref": "#/definitions/BadFormatResponse"
          },
          "401": {
            "$ref": "#/definitions/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/definitions/NotFoundResponse"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete the Item with the given ID from the Location with the given ID. Users with free accounts can delete Items in their default personal Location and their default shared Location, as long as the owner of the shared Location has an active subscription. Premium users can delete Items in Locations that they own or that they are a member of, provided that the owner of the Location has an active subscription",
        "parameters": [
          {
            "$ref": "#/definitions/LocationIdParam"
          },
          {
            "$ref": "#/definitions/ItemIdParam"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/definitions/SuccessResponse"
          },
          "401": {
            "$ref": "#/definitions/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/definitions/NotFoundResponse"
          }
        }
      }
    },
    "/locations/items/search": {
      "get": {
        "summary": "Search all Items",
        "description": "Search all Items in all Locations a user has access to. Users with a free account can view Items in Locations that they own and the one shared Location they are allowed to join. Premium users can view Items in Locations that they own or are a member of. Items can be searched by name.",
        "parameters": [
          {
            "in": "query",
            "name": "q",
            "description": "Search term for searching Items by name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Field to sort Items by",
            "schema": {
              "type": "string",
              "default": "name",
              "enum": [
                "name",
                "category",
                "added",
                "expirationDate",
                "opened",
                "purchaseLocation",
                "price"
              ]
            }
          },
          {
            "$ref": "#/definitions/OrderQuery"
          },
          {
            "$ref": "#/definitions/LimitQuery"
          },
          {
            "$ref": "#/definitions/OffsetQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested Item object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/ItemWithLocation"
                }
              }
            }
          },
          "401": {
            "$ref": "#/definitions/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/definitions/NotFoundResponse"
          }
        }
      }
    }
  },
  "definitions": {
    "LocationBasic": {
      "type": "object",
      "required": [
        "id",
        "name",
        "iconName",
        "owner",
        "notificationDays",
        "items",
        "members",
        "createdAt",
        "updatedAt"
      ],
      "properties": {
        "id": {
          "$ref": "#/definitions/ObjectID"
        },
        "name": {
          "$ref": "#/definitions/LocationName"
        },
        "iconName": {
          "$ref": "#/definitions/LocationIconName"
        },
        "owner": {
          "$ref": "#/definitions/BaseUserWithExpiry"
        },
        "members": {
          "type": "array",
          "description": "A list of members of the Location",
          "items": {
            "$ref": "#/definitions/BaseUser"
          }
        },
        "notificationDays": {
          "$ref": "#/definitions/LocationNotificationDays"
        },
        "items": {
          "type": "integer",
          "description": "The number of Items in the Location"
        },
        "notes": {
          "$ref": "#/definitions/LocationNotes"
        },
        "createdAt": {
          "$ref": "#/definitions/CreatedAt"
        },
        "updatedAt": {
          "$ref": "#/definitions/UpdatedAt"
        }
      }
    },
    "LocationCreateBody": {
      "type": "object",
      "required": ["name", "iconName"],
      "properties": {
        "name": {
          "$ref": "#/definitions/LocationName"
        },
        "iconName": {
          "$ref": "#/definitions/LocationIconName"
        }
      }
    },
    "LocationUpdateBody": {
      "type": "object",
      "properties": {
        "name": {
          "$ref": "#/definitions/LocationName"
        },
        "iconName": {
          "$ref": "#/definitions/LocationIconName"
        },
        "notificationDays": {
          "$ref": "#/definitions/LocationNotificationDays"
        }
      }
    },
    "Item": {
      "type": "object",
      "required": ["id", "name", "category", "iconName", "owner", "added"],
      "properties": {
        "id": {
          "$ref": "#/definitions/ObjectID"
        },
        "name": {
          "$ref": "#/definitions/ItemName"
        },
        "category": {
          "$ref": "#/definitions/ItemCategory"
        },
        "iconName": {
          "$ref": "#/definitions/ItemIconName"
        },
        "owner": {
          "$ref": "#/definitions/BaseUser"
        },
        "added": {
          "$ref": "#/definitions/ItemAdded"
        },
        "expirationDate": {
          "$ref": "#/definitions/ItemExpirationDate"
        },
        "opened": {
          "$ref": "#/definitions/ItemOpened"
        },
        "purchaseLocation": {
          "$ref": "#/definitions/ItemPurchaseLocation"
        },
        "notes": {
          "$ref": "#/definitions/ItemNotes"
        },
        "price": {
          "$ref": "#/definitions/ItemPrice"
        }
      }
    },
    "ItemWithLocation": {
      "type": "object",
      "required": [
        "id",
        "name",
        "category",
        "iconName",
        "owner",
        "added",
        "location"
      ],
      "properties": {
        "id": {
          "$ref": "#/definitions/ObjectID"
        },
        "name": {
          "$ref": "#/definitions/ItemName"
        },
        "category": {
          "$ref": "#/definitions/ItemCategory"
        },
        "iconName": {
          "$ref": "#/definitions/ItemIconName"
        },
        "owner": {
          "$ref": "#/definitions/BaseUser"
        },
        "added": {
          "$ref": "#/definitions/ItemAdded"
        },
        "expirationDate": {
          "$ref": "#/definitions/ItemExpirationDate"
        },
        "opened": {
          "$ref": "#/definitions/ItemOpened"
        },
        "purchaseLocation": {
          "$ref": "#/definitions/ItemPurchaseLocation"
        },
        "notes": {
          "$ref": "#/definitions/ItemNotes"
        },
        "price": {
          "$ref": "#/definitions/ItemPrice"
        },
        "location": {
          "type": "object",
          "description": "Location information for the Item",
          "properties": {
            "id": {
              "$ref": "#/definitions/ObjectID"
            },
            "name": {
              "$ref": "#/definitions/LocationName"
            }
          }
        }
      }
    },
    "ItemCreateBody": {
      "type": "object",
      "required": ["name", "category", "iconName"],
      "properties": {
        "name": {
          "$ref": "#/definitions/ItemName"
        },
        "category": {
          "$ref": "#/definitions/ItemCategory"
        },
        "iconName": {
          "$ref": "#/definitions/ItemIconName"
        },
        "added": {
          "$ref": "#/definitions/ItemAdded"
        },
        "expirationDate": {
          "$ref": "#/definitions/ItemExpirationDate"
        },
        "opened": {
          "$ref": "#/definitions/ItemOpened"
        },
        "purchaseLocation": {
          "$ref": "#/definitions/ItemPurchaseLocation"
        },
        "notes": {
          "$ref": "#/definitions/ItemNotes"
        },
        "price": {
          "$ref": "#/definitions/ItemPrice"
        }
      }
    },
    "ItemUpdateBody": {
      "type": "object",
      "properties": {
        "name": {
          "$ref": "#/definitions/ItemName"
        },
        "category": {
          "$ref": "#/definitions/ItemCategory"
        },
        "iconName": {
          "$ref": "#/definitions/ItemIconName"
        },
        "added": {
          "$ref": "#/definitions/ItemAdded"
        },
        "expirationDate": {
          "$ref": "#/definitions/ItemExpirationDate"
        },
        "opened": {
          "$ref": "#/definitions/ItemOpened"
        },
        "purchaseLocation": {
          "$ref": "#/definitions/ItemPurchaseLocation"
        },
        "notes": {
          "$ref": "#/definitions/ItemNotes"
        },
        "price": {
          "$ref": "#/definitions/ItemPrice"
        }
      }
    },
    "ObjectID": {
      "type": "string",
      "description": "The object's ID",
      "example": "61de02f2a63cabeaa04db27c"
    },
    "LocationName": {
      "type": "string",
      "description": "The Location's name",
      "example": "Julia's Fridge",
      "maxLength": 100
    },
    "LocationIconName": {
      "type": "string",
      "description": "The Location's display icon name",
      "example": "fridge",
      "maxLength": 100
    },
    "LocationNotificationDays": {
      "type": "array",
      "description": "How many days before items' expiration dates the requesting user should be notified.",
      "items": {
        "type": "integer"
      }
    },
    "LocationNotes": {
      "type": "string",
      "description": "Any notes about the Location",
      "example": "Fridge in the Kitchen",
      "maxLength": 300
    },
    "ItemName": {
      "type": "string",
      "description": "The name of the Item",
      "example": "Whole Milk",
      "maxLength": 100
    },
    "ItemCategory": {
      "type": "string",
      "description": "The category of the Item",
      "example": "grocery",
      "maxLength": 100
    },
    "ItemIconName": {
      "type": "string",
      "description": "The display icon name for the Item",
      "example": "grocery",
      "maxLength": 100
    },
    "ItemExpirationDate": {
      "type": "string",
      "format": "date-time",
      "description": "When the Item expires"
    },
    "ItemAdded": {
      "type": "string",
      "format": "date-time",
      "description": "When the Item was added to the Location"
    },
    "ItemOpened": {
      "type": "string",
      "format": "date-time",
      "description": "When the Item was opened"
    },
    "ItemPurchaseLocation": {
      "type": "string",
      "description": "Where the Item was purchased",
      "example": "Whole Foods",
      "maxLength": 100
    },
    "ItemPrice": {
      "type": "number",
      "description": "The price of the Item",
      "example": 5.99
    },
    "ItemNotes": {
      "type": "string",
      "description": "Any notes about the Item",
      "example": "Our favorite pizza!",
      "maxLength": 300
    },
    "CreatedAt": {
      "type": "string",
      "description": "When this object was created",
      "format": "date-time"
    },
    "UpdatedAt": {
      "type": "string",
      "description": "When this object was last updated",
      "format": "date-time"
    },
    "BaseUser": {
      "type": "object",
      "required": ["id", "name", "photoUrl"],
      "properties": {
        "id": {
          "$ref": "#definitions/ObjectID"
        },
        "name": {
          "type": "string",
          "description": "The User's name",
          "example": "Julia"
        },
        "photoUrl": {
          "type": "string",
          "nullable": true,
          "description": "The url to the User's profile photo",
          "example": "www.google.com"
        }
      }
    },
    "BaseUserWithExpiry": {
      "type": "object",
      "required": ["id", "name", "photoUrl"],
      "properties": {
        "id": {
          "$ref": "#definitions/ObjectID"
        },
        "name": {
          "type": "string",
          "description": "The User's name",
          "example": "Julia"
        },
        "photoUrl": {
          "type": "string",
          "nullable": true,
          "description": "The url to the User's profile photo",
          "example": "www.google.com"
        },
        "subscriptionExpires": {
          "type": "string",
          "description": "The date which this user's premium subscription expires, if applicable.",
          "example": "2022-01-11T01:51:19.641Z"
        }
      }
    },
    "SuccessResponse": {
      "description": "A success message",
      "content": {
        "application/json": {
          "schema": {
            "type": "object",
            "required": ["message"],
            "properties": {
              "message": {
                "description": "A success message",
                "type": "string",
                "example": "Update successful"
              }
            }
          }
        }
      }
    },
    "ErrorResponse": {
      "application/json": {
        "schema": {
          "type": "object",
          "required": ["name", "statusCode", "message", "details"],
          "properties": {
            "name": {
              "description": "The name of the error",
              "type": "string",
              "example": "database-error"
            },
            "message": {
              "description": "A message describing the error",
              "type": "string",
              "example": "Record not found"
            },
            "statusCode": {
              "description": "The status code of the error",
              "type": "string",
              "example": "404"
            },
            "details": {
              "description": "Error details",
              "type": "string",
              "example": "This resource was not found or you do not have permission to access it."
            }
          }
        }
      }
    },
    "NotFoundResponse": {
      "description": "The requested resource was not found or the user's account level does not have permission to access it.",
      "content": {
        "$ref": "#/definitions/ErrorResponse"
      }
    },
    "UnauthorizedResponse": {
      "description": "User is unauthorized. This can be due to invalid credentials or not having a premium account.",
      "content": {
        "$ref": "#/definitions/ErrorResponse"
      }
    },
    "BadFormatResponse": {
      "description": "The request was formed badly. Perhaps required fields are missing or invalid in the request body.",
      "content": {
        "$ref": "#/definitions/ErrorResponse"
      }
    },
    "LimitQuery": {
      "in": "query",
      "name": "limit",
      "description": "The maximum number of results to return",
      "schema": {
        "type": "integer",
        "default": 30,
        "minimum": 0,
        "maximum": 50
      }
    },
    "OffsetQuery": {
      "in": "query",
      "name": "offset",
      "description": "Offset of results to return",
      "schema": {
        "type": "integer",
        "default": "0",
        "minimum": 0
      }
    },
    "OrderQuery": {
      "in": "query",
      "name": "order",
      "description": "Whether to sort in descending order",
      "schema": {
        "type": "string",
        "enum": ["asc", "desc"],
        "default": "asc"
      }
    },
    "LocationIdParam": {
      "in": "path",
      "name": "id",
      "description": "The ID of the Location",
      "schema": {
        "type": "string"
      }
    },
    "ItemIdParam": {
      "in": "path",
      "name": "itemId",
      "description": "The ID of the Item",
      "schema": {
        "type": "string"
      }
    }
  }
}
